x-database-config-data:
  &mysql-connection-data
  environment:
    - SPRING_DATASOURCE_PLATFORM=mysql
    - MYSQL_ROOT_PASSWORD=${DB_PASSWORD}
    - MYSQL_DATABASE=cab_aggregator

x-config-server:
  &spring-config
  environment:
    - eureka.client.service-Url.defaultZone=http://eureka-server:8761/eureka

x-config-microservice:
  &spring-database-config
  environment:
    - eureka.client.service-Url.defaultZone=http://eureka-server:8761/eureka
    - spring.datasource.url=jdbc:mysql://mysql:3306/cab_aggregator
    - spring.datasource.username=${DB_USERNAME}
    - spring.datasource.password=${DB_PASSWORD}
    - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8180/realms/taxi-realm
    - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8180/realms/taxi-realm/protocol/openid-connect/certs

x-config-payment-service:
  &spring-payment-service-config
  environment:
    - eureka.client.service-Url.defaultZone=http://eureka-server:8761/eureka
    - spring.datasource.url=jdbc:mysql://mysql:3306/cab_aggregator
    - spring.datasource.username=${DB_USERNAME}
    - spring.datasource.password=${DB_PASSWORD}
    - stripe.keys.secret=${STRIPE_SECRET_KEY}
    - spring.security.oauth2.resourceserver.jwt.issuer-uri=http://keycloak:8180/realms/taxi-realm
    - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8180/realms/taxi-realm/protocol/openid-connect/certs

x-config-keycloak:
  &keycloak-config
  environment:
    - KC_BOOTSTRAP_ADMIN_USERNAME=${KEYCLOAK_USERNAME}
    - KC_BOOTSTRAP_ADMIN_PASSWORD=${KEYCLOAK_PASSWORD}
    - DB_VENDOR=MYSQL
    - DB_ADDR=mysql
    - DB_DATABASE=keycloak_db
    - DB_USER=${DB_USERNAME}
    - DB_PASSWORD=${DB_PASSWORD}
    - KEYCLOAK_FRONTEND_URL=http://keycloak:8180/

services:
  mysql:
    image: mysql:8.4.3
    restart: always
    ports:
      - "3306:3306"
    <<: *mysql-connection-data
    container_name: mysql
    networks:
      - app

  eureka-server:
    build:
      context: ./eureka-server
      dockerfile: ./Dockerfile
    image: eureka-server:v1.0
    ports:
      - "8761:8761"
    <<: *spring-config
    container_name: eureka-server
    networks:
      - app

  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: ./Dockerfile
    image: api-gateway:v1.0
    ports:
      - "8080:8080"
    <<: *spring-config
    container_name: api-gateway
    depends_on:
      - eureka-server
    networks:
      - app

  rabbitmq:
    image: rabbitmq:4.0.5-management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    networks:
      - app

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    networks:
      - app

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    restart: unless-stopped
    depends_on:
      - prometheus
    volumes:
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    networks:
      - app

  elasticsearch:
    image: elasticsearch:8.16.2
    container_name: elasticsearch
    environment:
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - "discovery.type=single-node"
      - xpack.security.enabled=false
    ports:
      - "9200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - app

  kibana:
    image: kibana:8.16.2
    container_name: kibana
    ports:
      - "5601:5601"
    environment:
      ELASTICSEARCH_URL: http://elasticsearch:9200
    networks:
      - app

  logstash:
    image: logstash:8.16.2
    container_name: logstash
    volumes:
      - ./monitoring/logstash:/usr/share/logstash/pipeline:ro
    ports:
      - "5000:5000"
    environment:
      LS_JAVA_OPTS: "-Xmx256m -Xms256m"
    networks:
      - app

  keycloak:
    image: quay.io/keycloak/keycloak
    container_name: keycloak
    ports:
      - "8180:8180"
    <<: *keycloak-config
    command: [ 'start-dev',
               '--http-port=8180',
               '--import-realm' ]
    volumes:
      - ./keycloak:/opt/jboss/keycloak/realm-config
    depends_on:
      - mysql
    networks:
      - app

  passenger-service:
    build:
      context: ./passenger-service
      dockerfile: ./Dockerfile
    image: passenger-service:v1.0
    ports:
      - "8081:8081"
    depends_on:
      - mysql
      - eureka-server
      - rabbitmq
      - logstash
    <<: *spring-database-config
    container_name: passenger-service
    networks:
      - app

  driver-service:
    build:
      context: ./driver-service
      dockerfile: ./Dockerfile
    image: driver-service:v1.0
    ports:
      - "8082:8082"
    depends_on:
      - mysql
      - eureka-server
      - rabbitmq
      - logstash
    <<: *spring-database-config
    container_name: driver-service
    networks:
      - app

  ride-service:
    build:
      context: ./ride-service
      dockerfile: ./Dockerfile
    image: ride-service:v1.0
    ports:
      - "8083:8083"
    depends_on:
      - mysql
      - eureka-server
      - rabbitmq
      - logstash
    <<: *spring-database-config
    container_name: ride-service
    networks:
      - app

  rating-service:
    build:
      context: ./rating-service
      dockerfile: ./Dockerfile
    image: rating-service:v1.0
    ports:
      - "8084:8084"
    depends_on:
      - mysql
      - eureka-server
      - rabbitmq
      - logstash
    <<: *spring-database-config
    container_name: rating-service
    networks:
      - app

  payment-service:
    build:
      context: ./payment-service
      dockerfile: ./Dockerfile
    image: payment-service:v1.0
    ports:
      - "8085:8085"
    depends_on:
      - mysql
      - eureka-server
      - rabbitmq
      - logstash
    <<: *spring-payment-service-config
    container_name: payment-service
    networks:
      - app

networks:
  app:
    name: app-network
    driver: bridge

volumes:
  elasticsearch_data:
    driver: local
